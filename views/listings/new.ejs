<%- include("../partials/header") %>

  <div style="margin-top: 35px;">
    <div class="container pt-3">
      <div class="row">
        <div class="col-12">
          <span style="font-size: 1.2em; font-weight: 600;" class="justify-content-center align-items-center d-flex">
            <a href="/listings" style="text-decoration: none; color: black">
              <ion-icon name="close-outline" style="font-size: 1.3em;" class="pr-2"></ion-icon>
            </a>
            What are you listing today?
          </span>
        </div>
      </div>
    </div>
  </div>

  <div class="container pt-3 mb-0">
    <form action="/listings" method="POST" enctype="multipart/form-data" name="newListingForm">
      <!-- drag and drop upload listing files -->
      <div class="row">
        <!-- drag and drop upload listing files -->
        <div class="offset-1 col-10">
          <div id="drop-area">
            <div class="dropText">
              <label class="fileBtn" for="galleryFileArray">Select Files</label>
              <p style="margin-top: 0;">or drag and drop here</p>
              <input style="display: none;" type="file" name="listingGallery" id="galleryFileArray" multiple accept="image/*, video/*" onchange="handleGalleryFiles(this.files)">
            </div>
          </div>
        </div>
        <!-- additional image/video gallery drag and drop -->
        <div class="offset-1 col-10">
          <div id="add-drop-area">
            <div class="dropText">
              <p style="font-size: 0.95em;" id="listGalleryCount"></p>
              <label class="fileBtn" for="additionalGallery">Upload More Files</label>
              <p>or drag and drop here</p>
              <input type="file" style="display: none;" name="additionalGallery" id="additionalGallery" multiple accept="image/*, video/*" onchange="handleAddGalleryFiles(this.files)">
            </div>
          </div>
        </div>

        <div class="offset-1 col-10 mt-4">
          <div class="row" id="completeGallery">

            <div class="col-2">
              <div id="thumbnail-drop-area">
                <div id="thumbnail-gallery">
                  <i class="fa-4x fas fa-images" style="position: absolute; top: 25%; left: 25%; height: 10px; width: 10px"></i>
                </div>
                <div class="thumbnailSlctText">
                  <input name="listingThumbnail" style="display: none;" type="file" id="thumbnailFile" accept="image/*" onchange="handleThumbnailFile(this.files)">
                </div>
                <span style="background: black; color: white; font-size: 0.9em; font-weight: 600; padding: 1px 29px 1px 29px; position: absolute; bottom: 0; right: 0; border-radius: 10px;">Thumbnail</span>
              </div>
            </div>

          </div>
        </div>

        <div class="offset-1 col-10 mt-4 pt-3">
          <div id="upldForm-form">
            <span style="font-weight: 600; font-size: 1.7em;">Listing Type</span><br>
            <div class="form-row my-2">
              <div class="form-group col-6 list-type-new" id="listRes">
                <input type="radio" id="listType-1" name="listingCategory" value="residential">
                <label class="list-type-res"  for="listType-1">Residential Property</label>
              </div>
              <div class="form-group col-6 list-type-new " id="listCom">
                <input type="radio" id="listType-2" name="listingCategory" value="commercial">
                <label class="list-type-com" for="listType-2">Commercial Property</label>
              </div>
            </div>

            <span style="font-weight: 600; font-size: 1.7em;">Property Details</span>
            <div class="form-row my-2">
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="name">Property Name</label>
                <input type="text" name="name" class="form-control" id="name" required>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="price">Price (in SGD)</label>
                <input type="number" name="price" class="form-control" id="price" required>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="size">Size</label>
                <input type="number" name="size" class="form-control" id="size" required>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="type">Property Category</label>
                <select name="type" class="form-control" id="type" required>
                  <option></option>
                  <option value="hdb">HDB</option>
                  <option value="condo">Condo</option>
                  <option value="executivecondo">Executive Condominium</option>
                  <option value="landed">Landed</option>
                  <option value="terrace">Terrace</option>
                  <option value="semidetached">Semi-Detached</option>
                  <option value="detached">Detached</option>
                </select>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="bedrooms">Bedroom</label>
                <select name="bedrooms" class="form-control" id="bedrooms" required>
                  <option></option>
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                  <option value="5">5</option>
                  <option value="6">6</option>
                </select>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="bathrooms">Bathroom</label>
                <select name="bathrooms" class="form-control" id="bathrooms" required>
                  <option></option>
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                </select>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="tenure">Tenure</label>
                <select name="tenure" class="form-control" id="tenure" required>
                  <option></option>
                  <option value="unknown">Unknown</option>
                  <option value="ninetynine">99-Years Leasehold</option>
                  <option value="hundredthree">103-Years Leasehold</option>
                  <option value="hundredten">110-Years Leasehold</option>
                  <option value="ninehundrednine">999-Years Leasehold</option>
                  <option value="freehold">Freehold</option>
                </select>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="district">District</label>
                <input type="number" name="district" min="1" max="28" class="form-control" id="district" required>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="zone">Zone</label>
                <select name="zone" class="form-control" id="zone" required>
                  <option></option>
                  <option value="north">North</option>
                  <option value="south">South</option>
                  <option value="east">East</option>
                  <option value="west">West</option>
                </select>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="street">Street Address</label>
                <input type="text" name="street" class="form-control" id="street" required>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="unitNumber">Unit Number</label>
                <input type="text" name="unitNumber" class="form-control" id="unitNumber" required>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="location">Postal Code</label>
                <input type="number" name="location" class="form-control" id="location" required>
              </div>
              <div class="form-group col-12 col-sm-6 col-md-4">
                <label for="threeDImage">3D Image Link</label>
                <input type="text" name="threeDImage" class="form-control" id="threeDImage" required>
              </div>
              <div class="form-group col-12">
                <label for="description">Description</label>
                <textarea name="description" class="form-control" id="description" cols="30" rows="3"></textarea>
              </div>
            </div>

            <span style="font-weight: 600; font-size: 1.7em;">Facilities & Amenities</span>
            <div class="row pt-2">
              <div class="col-12 col-lg-6">
                <ul class="typeOfFacilities">
                  <div class="left">
                    <img src="/img/carpark.svg" alt="" style="width:22px;" class="pr-2">
                    Nearby carkpark: 
                  </div>
                  <div class="right justify-content-end d-flex text-center">
                    <li>
                      <input type="radio" id="carparkTrue" name="carpark" value="true" />
                      <label for="carparkTrue">
                        <ion-icon name="checkmark-outline"></ion-icon>
                      </label>
                    </li>
                    <li>
                      <input type="radio" id="carparkFalse" name="carpark" value="false" />
                      <label for="carparkFalse">
                        <ion-icon name="close-outline"></ion-icon>
                      </label>
                    </li>
                  </div>
                </ul>
              </div>
              <div class="col-12 col-lg-6">
                <ul class="typeOfFacilities">
                  <div class="left">
                    <img src="/img/swimmingpool.svg" alt="" style="width:30px;" class="pr-2">
                    Nearby <p class="d-none d-sm-inline mb-0">swimming </p>pool: 
                  </div>
                  <div class="right justify-content-end d-flex text-center">
                    <li>
                      <input type="radio" id="poolTrue" name="pool" value="true" />
                      <label for="poolTrue">
                        <ion-icon name="checkmark-outline"></ion-icon>
                      </label>
                    </li>
                    <li>
                      <input type="radio" id="poolFalse" name="pool" value="false" />
                      <label for="poolFalse">
                        <ion-icon name="close-outline"></ion-icon>
                      </label>
                    </li>
                  </div>
                </ul>
              </div>
              <div class="col-12 col-lg-6">
                <ul class="typeOfFacilities">
                  <div class="left">
                    <img src="/img/gym.svg" alt="" style="width:25px;" class="pr-2">
                    Nearby gym: 
                  </div>
                  <div class="right justify-content-end d-flex text-center">
                    <li>
                      <input type="radio" id="gymTrue" name="gym" value="true" />
                      <label for="gymTrue">
                        <ion-icon name="checkmark-outline"></ion-icon>
                      </label>
                    </li>
                    <li>
                      <input type="radio" id="gymFalse" name="gym" value="false" />
                      <label for="gymFalse">
                        <ion-icon name="close-outline"></ion-icon>
                      </label>
                    </li>
                  </div>
                </ul>
              </div>
              <div class="col-12 col-lg-6">
                <ul class="typeOfFacilities">
                  <div class="left">
                    <img src="/img/playground.svg" alt="" style="width:22px;" class="pr-2">
                    Nearby playground: 
                  </div>
                  <div class="right justify-content-end d-flex text-center">
                    <li>
                      <input type="radio" id="playgroundTrue" name="playground" value="true" />
                      <label for="playgroundTrue">
                        <ion-icon name="checkmark-outline"></ion-icon>
                      </label>
                    </li>
                    <li>
                      <input type="radio" id="playgroundFalse" name="playground" value="false" />
                      <label for="playgroundFalse">
                        <ion-icon name="close-outline"></ion-icon>
                      </label>
                    </li>
                  </div>
                </ul>
              </div>
              <div class="col-12 col-lg-6">
                <ul class="typeOfFacilities">
                  <div class="left">
                    <img src="/img/hall.svg" alt="" style="width:22px;" class="pr-2">
                    Nearby <p class="d-none d-sm-inline mb-0">multi-purpose </p>hall: 
                  </div>
                  <div class="right justify-content-end d-flex text-center">
                    <li>
                      <input type="radio" id="hallTrue" name="hall" value="true" />
                      <label for="hallTrue">
                        <ion-icon name="checkmark-outline"></ion-icon>
                      </label>
                    </li>
                    <li>
                      <input type="radio" id="hallFalse" name="hall" value="false" />
                      <label for="hallFalse">
                        <ion-icon name="close-outline"></ion-icon>
                      </label>
                    </li>
                  </div>
                </ul>
              </div>
              <div class="col-12 col-lg-6">
                <ul class="typeOfFacilities">
                  <div class="left">
                    <img src="/img/shopping.svg" alt="" style="width:20px;" class="pr-2">
                    Nearby <p class="d-none d-sm-inline mb-0">shopping </p>mall: 
                  </div>
                  <div class="right justify-content-end d-flex text-center">
                    <li>
                      <input type="radio" id="mallTrue" name="mall" value="true" />
                      <label for="mallTrue">
                        <ion-icon name="checkmark-outline"></ion-icon>
                      </label>
                    </li>
                    <li>
                      <input type="radio" id="mallFalse" name="mall" value="false" />
                      <label for="mallFalse">
                        <ion-icon name="close-outline"></ion-icon>
                      </label>
                    </li>
                  </div>
                </ul>
              </div>
              <div class="col-12 col-lg-6">
                <ul class="typeOfFacilities">
                  <div class="left">
                    <img src="/img/intercom.svg" alt="" style="width:22px;" class="pr-2">
                    Intercom: 
                  </div>
                  <div class="right justify-content-end d-flex text-center">
                    <li>
                      <input type="radio" id="intercomTrue" name="intercom" value="true" />
                      <label for="intercomTrue">
                        <ion-icon name="checkmark-outline"></ion-icon>
                      </label>
                    </li>
                    <li>
                      <input type="radio" id="intercomFalse" name="intercom" value="false" />
                      <label for="intercomFalse">
                        <ion-icon name="close-outline"></ion-icon>
                      </label>
                    </li>
                  </div>
                </ul>
              </div>
              <div class="col-12 col-lg-6">
                <ul class="typeOfFacilities">
                  <div class="left">
                    <img src="/img/security.svg" alt="" style="width:22px;" class="pr-2">
                    24 hours security: 
                  </div>
                  <div class="right justify-content-end d-flex text-center">
                    <li>
                      <input type="radio" id="securityTrue" name="security" value="true" />
                      <label for="securityTrue">
                        <ion-icon name="checkmark-outline"></ion-icon>
                      </label>
                    </li>
                    <li>
                      <input type="radio" id="securityFalse" name="security" value="false" />
                      <label for="securityFalse">
                        <ion-icon name="close-outline"></ion-icon>
                      </label>
                    </li>
                  </div>
                </ul>
              </div>
            </div>
            <div class="justify-content-center d-flex pt-2">
              <input class="btn btn-dark px-5 py-1" type="submit" value="List now">
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>

  <script>

    
    $('input[name=listingCategory]').on('change', function() {
        var resi = document.getElementById("listRes");
        var comm = document.getElementById("listCom");
    
        if(document.getElementById('listType-1').checked) {
          resi.classList.remove("activeSelect");
            comm.classList.add("activeSelect")

            
        }else if(document.getElementById('listType-2').checked) {
          comm.classList.remove("activeSelect")
            resi.classList.add("activeSelect")
        }
    });
    
    </script>
    <script>
      //1ST drop area: event listeners + prevent defaults + drag/drop + highlight/unhighlight 
      let dropArea = document.getElementById("drop-area");
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false)   
        document.body.addEventListener(eventName, preventDefaults, false)
      });
      ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false)
      });
      ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false)
      });
      dropArea.addEventListener('drop', handleDrop, false);
      function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
      }
      function highlight(e) {
        dropArea.classList.add('highlight')
      }
      function unhighlight(e) {
        dropArea.classList.remove('highlight')
      }

      //Handling files for preview and update 
      function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
      }
      //Delete button to append to gallery images
      function deleteItem(id) {
        var thumbnailFile = document.getElementById("thumbnailFile");
        var galleryFileArray = document.getElementById("galleryFileArray");
        var thumbnailGallery = document.getElementById("thumbnail-gallery");
        var list = new DataTransfer();
        var newList = new DataTransfer();
        var emptyThumbList = new DataTransfer();
        var emptyGalleryList = new DataTransfer();
        //add thumbnail into list
        for(let i=0; i<thumbnailFile.files.length; i++) {
          emptyThumbList.items.add(thumbnailFile.files[i])
          list.items.add(thumbnailFile.files[i])
        }
        //add gallery into list
        for(let i=0; i<galleryFileArray.files.length; i++) {
          list.items.add(galleryFileArray.files[i])
        }   
        //remove from file array 
        for(let i=0; i<list.files.length; i++) {
          if(i != id) {
            newList.items.add(list.files[i]);
          }
        }   
        if(galleryFileArray.files.length == 0) {
          galleryFileArray.files = emptyGalleryList.files;
          thumbnailFile.files = emptyGalleryList.files;
          handleGalleryFiles(emptyGalleryList.files);
        }else if(galleryFileArray.files.length < 2) {
          console.log('emptyThumbList.files: ', emptyThumbList.files)
          galleryFileArray.files = emptyGalleryList.files;
          handleGalleryFiles(emptyThumbList.files);
        }else {
          handleGalleryFiles(newList.files);
        }
      }
      function handleDrop(e) {
        var dt = e.dataTransfer
        var files = dt.files
        handleGalleryFiles(files);
      }
      function handleGalleryFiles(files) {
        files = [...files];
        console.log('file array: ', files);
        document.getElementById("drop-area").style.display = "none"
        document.getElementById("add-drop-area").style.display = "block"
        document.getElementById("thumbnail-drop-area").style.display = "block"
        document.getElementById("upldForm-form").style.display = "block"
        updateAllFiles(files);
        updateMediaCount();
      }

      function updateAllFiles(files) {
        var thumbnailFile = document.getElementById("thumbnailFile");
        var thumbnailGallery = document.getElementById("thumbnail-gallery");
        var galleryFileArray = document.getElementById("galleryFileArray");
        var completeGallery = document.getElementById('completeGallery')
        //remove the previous images
        if(thumbnailGallery.children[0]) {
          thumbnailGallery.removeChild(thumbnailGallery.children[0])
        }
        while(completeGallery.childNodes.length > 2) {
          // completeGallery.removeChild(document.getElementsByClassName("listingImage").parentNode);
          completeGallery.removeChild(completeGallery.lastChild)
        }
        //make files into list
        var list = new DataTransfer();
        var thumbnailList = new DataTransfer(); 
        console.log('files.length: ', files.length)
        var firstImage = 0;
        for(let i=0; i<files.length; i++) {
          if(files[i].type.includes("image") && firstImage == 0) {
            console.log('1')
            firstImage++;
            //update first into thumbnail file input
            thumbnailList.items.add(files[i])
            thumbnailFile.files = thumbnailList.files;
            // updateThumbnail(files[i]);
            //preview thumbnail
            let reader = new FileReader();
            reader.readAsDataURL(files[i]);
            reader.onloadend = function() {
              //img div to contain img and btn
              var imgDiv = document.createElement('div');
              imgDiv.classList.add('listingImage'); 
              imgDiv.setAttribute("id", "galleryItem"+i);
              //image src + file
              var img = document.createElement('img');
              img.src = reader.result;
              img.setAttribute("id", "imageItem"+i);
              img.classList.add("image-gallery-style");
              img.setAttribute("draggable", true);
              img.setAttribute("ondragstart", "drag(event)");
              //delete image btn
              var dltItemBtn = document.createElement('span');
              dltItemBtn.classList.add('deleteItemFromGallery');
              dltItemBtn.innerHTML= "&times;";
              dltItemBtn.setAttribute("onclick", "deleteItem("+i+")");
              //add img and btn to div
              imgDiv.appendChild(img);
              imgDiv.appendChild(dltItemBtn);
              //Append the thing to the complete gallery
              thumbnailGallery.appendChild(imgDiv);
            }
          }else {
            console.log('2')
            list.items.add(files[i])
            //update other files into galleryFileArray input
            galleryFileArray.files = list.files;
            //preview
            var galleryFiles = list.files;
            console.log('wwwwwwwwwwwwwww: ', files.length)
            console.log('hhhhhhhhhhhhhhh: ', (i+1))
            if((i+1) == files.length) {
            for(let a=0; a<galleryFiles.length; a++) {
              let reader = new FileReader();
              reader.readAsDataURL(galleryFiles[a]);
              reader.onloadend = function() {
                if(galleryFiles[a].type.includes('image')) {
                  //col-2
                  var imgColDiv = document.createElement('div');
                  imgColDiv.classList.add('col-2');
                  //img div to contain img and btn
                  var imgDiv = document.createElement('div');
                  imgDiv.classList.add('listingImage'); 
                  imgDiv.setAttribute("id", "galleryItem"+(a+1));
                  //image src + file
                  var img = document.createElement('img');
                  img.src = reader.result;
                  img.setAttribute("id", "imageItem"+(a+1));
                  img.classList.add("image-gallery-style");
                  img.setAttribute("draggable", true);
                  img.setAttribute("ondragstart", "drag(event)");
                  //delete image btn
                  var dltItemBtn = document.createElement('span');
                  dltItemBtn.classList.add('deleteItemFromGallery');
                  dltItemBtn.innerHTML= "&times;";
                  dltItemBtn.setAttribute("onclick", "deleteItem("+(a+1)+")");
                  //add img and btn to div
                  imgDiv.appendChild(img);
                  imgDiv.appendChild(dltItemBtn);
                  imgColDiv.appendChild(imgDiv);
                  //Append the thing to the complete gallery
                  document.getElementById('completeGallery').appendChild(imgColDiv);
                }else if(galleryFiles[a].type.includes('video')) {
                  //col-2
                  var vidColDiv = document.createElement('div');
                  vidColDiv.classList.add('col-2');
                  //video div to contain video and button
                  var vidDiv = document.createElement('div');
                  vidDiv.classList.add('listingVideo'); 
                  vidDiv.setAttribute("id", "galleryItem"+(a+1));
                  //video src + file
                  var vid = document.createElement('video');
                  vid.src  = reader.result;
                  vid.setAttribute("controls", "")
                  vid.setAttribute("controlslist", "nodownload");
                  vid.setAttribute("id", "videoItem"+(a+1));
                  vid.classList.add("video-gallery-style");
                  //delete video btn
                  var dltItemBtn = document.createElement('span');
                  dltItemBtn.classList.add('deleteItemFromGallery');
                  dltItemBtn.innerHTML= "&times;";
                  dltItemBtn.setAttribute("onclick", "deleteItem("+(a+1)+")");
                  //add img and btn to div
                  vidDiv.appendChild(vid);
                  vidDiv.appendChild(dltItemBtn);
                  vidColDiv.appendChild(vidDiv)
                  //Append the thing to the complete gallery
                  document.getElementById('completeGallery').appendChild(vidColDiv);
                }
              }
            }
            }
          }//else >0
        }
      }

      function updateMediaCount() {
        var thumbnailFile = document.getElementById("thumbnailFile");
        var galleryFileArray = document.getElementById("galleryFileArray");
        var list = new DataTransfer();
        //add thumbnail into list
        for(let i=0; i<thumbnailFile.files.length; i++) {
          list.items.add(thumbnailFile.files[i])
        }
        //add gallery into list
        for(let i=0; i<galleryFileArray.files.length; i++) {
          list.items.add(galleryFileArray.files[i])
        }   
        console.log('count file length: ',  list.files.length)
        document.getElementById("listGalleryCount").innerHTML = "(" + list.files.length + " Media Uploaded)"
      }
    </script>
    <script>
      //2ND drop area: event listeners + prevent defaults + drag/drop + highlight/unhighlight 
      let addDropArea = document.getElementById("add-drop-area");
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        addDropArea.addEventListener(eventName, preventDefaults, false)   
        document.body.addEventListener(eventName, preventDefaults, false)
      });
      ['dragenter', 'dragover'].forEach(eventName => {
        addDropArea.addEventListener(eventName, highlight, false)
      });
      ['dragleave', 'drop'].forEach(eventName => {
        addDropArea.addEventListener(eventName, unhighlight, false)
      });
      addDropArea.addEventListener('drop', handleAddDrop, false);
      function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
      }
      function highlight(e) {
        addDropArea.classList.add('highlight')
      }
      function unhighlight(e) {
        addDropArea.classList.remove('highlight')
      }
      function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
      }

      //Handling files for preview and update 
      function handleAddDrop(e) {
        var dt = e.dataTransfer
        var files = dt.files
        handleAddGalleryFiles(files);
      }
      function handleAddGalleryFiles(files) {
        var thumbnailFile = document.getElementById("thumbnailFile");
        var galleryFileArray = document.getElementById("galleryFileArray");
        var list = new DataTransfer();
        //add thumbnail into list
        for(let i=0; i<thumbnailFile.files.length; i++) {
          list.items.add(thumbnailFile.files[i])
        }
        //add files into list
        for(let i=0; i<files.length; i++) {
          list.items.add(files[i])
        }  
        //add gallery into list
        for(let i=0; i<galleryFileArray.files.length; i++) {
          list.items.add(galleryFileArray.files[i])
        }         
        handleGalleryFiles(list.files);
      }
    </script>
    <script>
      //Thumbnail drop area: event listeners + prevent defaults + drag/drop + highlight/unhighlight 
      let thumbnailDropArea = document.getElementById("thumbnail-drop-area");
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          thumbnailDropArea.addEventListener(eventName, preventDefaults, false)   
          document.body.addEventListener(eventName, preventDefaults, false)
      });
      ['dragenter', 'dragover'].forEach(eventName => {
          thumbnailDropArea.addEventListener(eventName, highlight, false)
      });
      ['dragleave', 'drop'].forEach(eventName => {
          thumbnailDropArea.addEventListener(eventName, unhighlight, false)
      });
      thumbnailDropArea.addEventListener('drop', handleThumbnailDrop, false);
      function preventDefaults (e) {
          e.preventDefault()
          e.stopPropagation()
      }
      function highlight(e) {
          thumbnailDropArea.classList.add('highlight')
      }
      function unhighlight(e) {
          thumbnailDropArea.classList.remove('highlight')
      }
      function dataURLtoFile(dataurl, filename) {
        var arr = dataurl.split(','),
            mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]), 
            n = bstr.length, 
            u8arr = new Uint8Array(n);
        while(n--){
            u8arr[n] = bstr.charCodeAt(n);
        }
        return new File([u8arr], filename, {type:mime});
      }
      
      function handleThumbnailDrop(e) {
        var dt = e.dataTransfer;
        var files = dt.files;
        var slctEle = dt.getData('text')
        if(slctEle) {
          var slctId = Number(slctEle.replace("imageItem", ""))
          var thumbnailFile = document.getElementById("thumbnailFile");
          var thumbnailGallery = document.getElementById("thumbnail-gallery");
          var galleryFileArray = document.getElementById("galleryFileArray");
          var completeGallery = document.getElementById('completeGallery')
          thumbnailGallery.removeChild(thumbnailGallery.children[0])
          while(completeGallery.childNodes.length > 2) {
            completeGallery.removeChild(completeGallery.lastChild)
          }
          var list = new DataTransfer();
          var thumbnailList = new DataTransfer(); 
          var galleryList = new DataTransfer(); 
          //add thumbnail into list
          for(let i=0; i<thumbnailFile.files.length; i++) {
            list.items.add(thumbnailFile.files[i])
          }
          //add gallery into list
          for(let i=0; i<galleryFileArray.files.length; i++) {
            list.items.add(galleryFileArray.files[i])
          } 

          for(let i=0; i<list.files.length; i++) {
            if(i == slctId) {
              console.log('slcted thumb from gallery: ', list.files[i])
              //update first into thumbnail file input
              thumbnailList.items.add(list.files[i])
              thumbnailFile.files = thumbnailList.files;
              // updateThumbnail(files[i]);
              //preview thumbnail
              let reader = new FileReader();
              reader.readAsDataURL(list.files[i]);
              reader.onloadend = function() {
                //img div to contain img and btn
                var imgDiv = document.createElement('div');
                imgDiv.classList.add('listingImage'); 
                imgDiv.setAttribute("id", "galleryItem"+i);
                //image src + file
                var img = document.createElement('img');
                img.src = reader.result;
                img.setAttribute("id", "imageItem"+i);
                img.classList.add("image-gallery-style");
                img.setAttribute("draggable", true);
                img.setAttribute("ondragstart", "drag(event)");
                //delete image btn
                var dltItemBtn = document.createElement('span');
                dltItemBtn.classList.add('deleteItemFromGallery');
                dltItemBtn.innerHTML= "&times;";
                dltItemBtn.setAttribute("onclick", "deleteItem("+i+")");
                //add img and btn to div
                imgDiv.appendChild(img);
                imgDiv.appendChild(dltItemBtn);
                //Append the thing to the complete gallery
                thumbnailGallery.appendChild(imgDiv);
              }
            }else {
              console.log('2nd gallery: ', list.files[i])
              galleryList.items.add(list.files[i])
              galleryFileArray.files = galleryList.files;
              //preview
              var galleryFiles = galleryFileArray.files;
              console.log('iiiiiiiiiiiiiii: ', list.files.length)
              console.log('ppppppppppppppp: ', (i+1))
              //(i+1) == list.files.length || (slctId+1) == list.files.length
              //if last element is selected
              var addMissing;
              if((slctId+1) == list.files.length) { 
                addMissing = 2;
              }else {
                addMissing = 1;
              }
              if((i+addMissing)==list.files.length) {
                for(let a=0; a<galleryFiles.length; a++) {
                  console.log('check gallery file at a: ', galleryFiles[a]);
                  let reader = new FileReader();
                  reader.readAsDataURL(galleryFiles[a]);
                  reader.onloadend = function() {
                    if(galleryFiles[a].type.includes('image')) {
                      //col-2
                      var imgColDiv = document.createElement('div');
                      imgColDiv.classList.add('col-2');
                      //img div to contain img and btn
                      var imgDiv = document.createElement('div');
                      imgDiv.classList.add('listingImage'); 
                      imgDiv.setAttribute("id", "galleryItem"+(a+1));
                      //image src + file
                      var img = document.createElement('img');
                      img.src = reader.result;
                      img.setAttribute("id", "imageItem"+(a+1));
                      img.classList.add("image-gallery-style");
                      img.setAttribute("draggable", true);
                      img.setAttribute("ondragstart", "drag(event)");
                      //delete image btn
                      var dltItemBtn = document.createElement('span');
                      dltItemBtn.classList.add('deleteItemFromGallery');
                      dltItemBtn.innerHTML= "&times;";
                      dltItemBtn.setAttribute("onclick", "deleteItem("+(a+1)+")");
                      //add img and btn to div
                      imgDiv.appendChild(img);
                      imgDiv.appendChild(dltItemBtn);
                      imgColDiv.appendChild(imgDiv);
                      //Append the thing to the complete gallery
                      document.getElementById('completeGallery').appendChild(imgColDiv);
                    }else if(galleryFiles[a].type.includes('video')) {
                      //col-2
                      var vidColDiv = document.createElement('div');
                      vidColDiv.classList.add('col-2');
                      //video div to contain video and button
                      var vidDiv = document.createElement('div');
                      vidDiv.classList.add('listingVideo'); 
                      vidDiv.setAttribute("id", "galleryItem"+(a+1));
                      //video src + file
                      var vid = document.createElement('video');
                      vid.src  = reader.result;
                      vid.setAttribute("controls", "")
                      vid.setAttribute("controlslist", "nodownload");
                      vid.setAttribute("id", "videoItem"+(a+1));
                      vid.classList.add("video-gallery-style");
                      //delete video btn
                      var dltItemBtn = document.createElement('span');
                      dltItemBtn.classList.add('deleteItemFromGallery');
                      dltItemBtn.innerHTML= "&times;";
                      dltItemBtn.setAttribute("onclick", "deleteItem("+(a+1)+")");
                      //add img and btn to div
                      vidDiv.appendChild(vid);
                      vidDiv.appendChild(dltItemBtn);
                      vidColDiv.appendChild(vidDiv)
                      //Append the thing to the complete gallery
                      document.getElementById('completeGallery').appendChild(vidColDiv);
                    }
                  }
                }
              }
            }
          }  

        }else {
          console.log('file drop')
          handleThumbnailFile(files);
        }
      }
      function handleThumbnailFile(files) {
        var list = new DataTransfer();
        //add files into list
        for(let i=0; i<files.length; i++) {
          list.items.add(files[i])
        }   
        var thumbnailFile = document.getElementById("thumbnailFile");
        var galleryFileArray = document.getElementById("galleryFileArray");
        //add thumbnail into list
        for(let i=0; i<thumbnailFile.files.length; i++) {
          list.items.add(thumbnailFile.files[i])
        }
        //add gallery into list
        for(let i=0; i<galleryFileArray.files.length; i++) {
          list.items.add(galleryFileArray.files[i])
        }        
        handleGalleryFiles(list.files);
        
      }
      // function updateThumbnail(files) {
      //   var thumbnailFile = document.getElementById("thumbnailFile");
      //   thumbnailFile.files = files[0];
      // }
      // //Preview thumbnail
      // function previewThumbnail(files) {
      //   var previousFiles = document.getElementById("completeGallery").children.length - 1; //minus 1 because thumbnail gallery is counted as one children in the complete gallery
      //   var thumbnailGallery = document.getElementById("thumbnail-gallery");
      //   var completeGallery = document.getElementById('completeGallery');
      //   let reader = new FileReader();
      //   reader.readAsDataURL(files[0]);
      //   reader.onloadend = function() {
      //     //img div to contain img and btn
      //     var imgDiv = document.createElement('div');
      //     imgDiv.classList.add('listingImage'); 
      //     imgDiv.setAttribute("id", "galleryItem"+previousFiles);
      //     //image src + file
      //     var img = document.createElement('img');
      //     img.src = reader.result;
      //     img.setAttribute("id", "imageItem"+previousFiles);
      //     img.classList.add("image-gallery-style");
      //     img.setAttribute("draggable", true);
      //     img.setAttribute("ondragstart", "drag(event)");
      //     //delete image btn
      //     var dltItemBtn = document.createElement('span');
      //     dltItemBtn.classList.add('deleteItemFromGallery');
      //     dltItemBtn.innerHTML= "&times;";
      //     dltItemBtn.setAttribute("onclick", "deleteItem("+previousFiles+")");
      //     //add img and btn to div
      //     imgDiv.appendChild(img);
      //     imgDiv.appendChild(dltItemBtn);
      //     //Append the thing to the complete gallery
      //     thumbnailGallery.removeChild(thumbnailGallery.children[0]);
      //     thumbnailGallery.appendChild(imgDiv);
      //   }
      // }
    </script>
    <!-- <script>
      //1ST drop area: event listeners + prevent defaults + drag/drop + highlight/unhighlight 
      let dropArea = document.getElementById("drop-area");
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false)   
        document.body.addEventListener(eventName, preventDefaults, false)
      });
      ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false)
      });
      ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false)
      });
      dropArea.addEventListener('drop', handleDrop, false);
      function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
      }
      function highlight(e) {
        dropArea.classList.add('highlight')
      }
      function unhighlight(e) {
        dropArea.classList.remove('highlight')
      }

      //Handling files for preview and update 
      function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
      }
      function handleDrop(e) {
        var dt = e.dataTransfer
        var files = dt.files
        console.log('1st drop: ', files);
        handleGalleryFiles(files);
      }
      function handleGalleryFiles(files) {
        var thumbnailFile = document.getElementById("thumbnailFile");
        console.log('check 1st drop: ', files);
        files = [...files];
        console.log('converted file arr: ', files);
        document.getElementById("drop-area").style.display = "block"
        document.getElementById("add-drop-area").style.display = "block"
        document.getElementById("thumbnail-drop-area").style.display = "block"
        document.getElementById("upldForm-form").style.display = "block"
        if(thumbnailFile.files.length == 0){
          console.log('filwdsj: ', files[0]);
          updateThumbnail(files[0]);
          var newFiles = [];
          for(let i=0; i<files.length; i++) {
            if(i != 0) {
              newFiles.push(files[i])
            }
          }
          updateGallery(newFiles);
        }else {
          updateGallery(files);
        }
        previewGallery(files);
      }
  
      //Update the file gallery 
      function updateGallery(files) {
        var galleryFileArray = document.getElementById("galleryFileArray");
        //push in previous files uploaded into list if exist
        var list = new DataTransfer();
        //push in new uploaded files into list
        for(let i=0; i<files.length; i++) {
          console.log('gjhk: ', files[i])
          list.items.add(files[i])
        }
        console.log('list .files',list.files)
        //update the new files into galleryFileArray
        galleryFileArray.files = list.files;
        console.log('updated galleryFileArray.files: ', galleryFileArray.files)
      }

      //Delete button to append to gallery images
      function deleteItem(id) {
        //remove from file input
        var fileList = document.getElementById('galleryFileArray');
        var list = new DataTransfer();
        for(let i=0; i<fileList.files.length; i++) {
          if(i != id) {
            list.items.add(fileList.files[i]);
          }
        }
        fileList.files = list.files;
        //remove from preview
        document.getElementById("completeGallery").removeChild(document.getElementById("galleryItem"+id).parentNode);
        //update the media counter
        updateMediaCount();
      }

      //Preview the uploaded files in galleryFileArray
      function previewGallery(files) {
        var previousFiles = document.getElementById("completeGallery").children.length - 1; //minus 1 because thumbnail gallery is counted as one children in the complete gallery
        var thumbnailFile = document.getElementById("thumbnailFile");
        var thumbnailGallery = document.getElementById('thumbnail-gallery');
        for(let i=0; i<files.length; i++) {
          console.log('check gallery id: ', (i+previousFiles));
          let reader = new FileReader();
          reader.readAsDataURL(files[i]);
          reader.onloadend = function() {
            if(files[i].type.includes('image')) {
              //col-2
              var imgColDiv = document.createElement('div');
              imgColDiv.classList.add('col-2');
              //img div to contain img and btn
              var imgDiv = document.createElement('div');
              imgDiv.classList.add('listingImage'); 
              imgDiv.setAttribute("id", "galleryItem"+(i+previousFiles));
              //image src + file
              var img = document.createElement('img');
              img.src = reader.result;
              img.setAttribute("id", "imageItem"+(i+previousFiles));
              img.classList.add("image-gallery-style");
              img.setAttribute("draggable", true);
              img.setAttribute("ondragstart", "drag(event)");
              //delete image btn
              var dltItemBtn = document.createElement('span');
              dltItemBtn.classList.add('deleteItemFromGallery');
              dltItemBtn.innerHTML= "&times;";
              dltItemBtn.setAttribute("onclick", "deleteItem("+(i+previousFiles)+")");
              //add img and btn to div
              imgDiv.appendChild(img);
              imgDiv.appendChild(dltItemBtn);
              imgColDiv.appendChild(imgDiv);
              //Append the thing to the complete gallery
              if(thumbnailGallery.children[0].tagName == "I"){
                imgDiv.childNodes[1].style.display = "none"
                console.log('1234: ', thumbnailGallery)
                thumbnailGallery.removeChild(thumbnailGallery.children[0])
                thumbnailGallery.appendChild(imgDiv);
              }else {
                document.getElementById('completeGallery').appendChild(imgColDiv);
              }
            }else if(files[i].type.includes('video')) {
              //col-2
              var vidColDiv = document.createElement('div');
              vidColDiv.classList.add('col-2');
              //video div to contain video and button
              var vidDiv = document.createElement('div');
              vidDiv.classList.add('listingVideo'); 
              vidDiv.setAttribute("id", "galleryItem"+(i+previousFiles));
              //video src + file
              var vid = document.createElement('video');
              vid.src  = reader.result;
              vid.setAttribute("controls", "")
              vid.setAttribute("controlslist", "nodownload");
              vid.setAttribute("id", "videoItem"+(i+previousFiles));
              vid.classList.add("video-gallery-style");
              //delete video btn
              var dltItemBtn = document.createElement('span');
              dltItemBtn.classList.add('deleteItemFromGallery');
              dltItemBtn.innerHTML= "&times;";
              dltItemBtn.setAttribute("onclick", "deleteItem("+(i+previousFiles)+")");
              //add img and btn to div
              vidDiv.appendChild(vid);
              vidDiv.appendChild(dltItemBtn);
              vidColDiv.appendChild(vidDiv)
              //Append the thing to the complete gallery
              document.getElementById('completeGallery').appendChild(vidColDiv);
            }
          }
        }  
      }
    </script> -->
    <!-- <script> 
      //2ND drop area: event listeners + prevent defaults + drag/drop + highlight/unhighlight 
      let addDropArea = document.getElementById("add-drop-area");
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        addDropArea.addEventListener(eventName, preventDefaults, false)   
        document.body.addEventListener(eventName, preventDefaults, false)
      });
      ['dragenter', 'dragover'].forEach(eventName => {
        addDropArea.addEventListener(eventName, highlight, false)
      });
      ['dragleave', 'drop'].forEach(eventName => {
        addDropArea.addEventListener(eventName, unhighlight, false)
      });
      addDropArea.addEventListener('drop', handleAddDrop, false);
      function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
      }
      function highlight(e) {
        addDropArea.classList.add('highlight')
      }
      function unhighlight(e) {
        addDropArea.classList.remove('highlight')
      }
      function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
      }

      //Handling files for preview and update 
      function handleAddDrop(e) {
        var dt = e.dataTransfer
        var files = dt.files
        handleAddGalleryFiles(files);
      }
      function checkPreviousGallery() {
        var galleryFileArray = document.getElementById("galleryFileArray");
        console.log('previous files: ',galleryFileArray.files)
        return galleryFileArray.files
      }
      function handleAddGalleryFiles(files) {
        files = [...files];
        updateAddGallery(files);
        previewGallery(files);
      }
  
      //Update the file gallery 
      function updateAddGallery(files) {
        var galleryFileArray = document.getElementById("galleryFileArray");
        var list = new DataTransfer();
        //push in previous files uploaded into list if exist
        var previousFiles = checkPreviousGallery();
        for(let i=0; i<previousFiles.length; i++) {
          list.items.add(previousFiles[i]);
        }
        //push in new uploaded files into list
        for(let i=0; i<files.length; i++) {
          list.items.add(files[i])
        }
        //update the new files into galleryFileArray
        galleryFileArray.files = list.files;
        console.log('updated galleryFileArray.files: ', galleryFileArray.files)
      }
    </script> -->
    <!-- <script>
      //Thumbnail drop area: event listeners + prevent defaults + drag/drop + highlight/unhighlight 
      let thumbnailDropArea = document.getElementById("thumbnail-drop-area");
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          thumbnailDropArea.addEventListener(eventName, preventDefaults, false)   
          document.body.addEventListener(eventName, preventDefaults, false)
      });
      ['dragenter', 'dragover'].forEach(eventName => {
          thumbnailDropArea.addEventListener(eventName, highlight, false)
      });
      ['dragleave', 'drop'].forEach(eventName => {
          thumbnailDropArea.addEventListener(eventName, unhighlight, false)
      });
      thumbnailDropArea.addEventListener('drop', handleThumbnailDrop, false);
      function preventDefaults (e) {
          e.preventDefault()
          e.stopPropagation()
      }
      function highlight(e) {
          thumbnailDropArea.classList.add('highlight')
      }
      function unhighlight(e) {
          thumbnailDropArea.classList.remove('highlight')
      }
      function dataURLtoFile(dataurl, filename) {
        var arr = dataurl.split(','),
            mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]), 
            n = bstr.length, 
            u8arr = new Uint8Array(n);
        while(n--){
            u8arr[n] = bstr.charCodeAt(n);
        }
        return new File([u8arr], filename, {type:mime});
      }
      
      //Handling files for preview and update 
      function handleThumbnailDrop(e) {
        var dt = e.dataTransfer
        var files = dt.files
        console.log('2nd drop: ', files);
        var slctEle = dt.getData("text");
        console.log('the slcted drop: ', slctEle);
        if(slctEle) {
          console.log('select element drop')
          handleSelectFile(dt.getData("text"));
        }else {
          console.log('file explorer drop')
          handleThumbnailFile(files);
        }
      }
      //HANDLING FILES
      function handleThumbnailFile(files) {
        console.log('check 2nd drop: ', files);
        files = [...files];
        console.log('converted 2nd file arr: ', files);
        updateThumbnail(files);
        previewThumbnail(files);
      }
      //Update thumbnail
      function updateThumbnail(files) {
        var thumbnailFile = document.getElementById("thumbnailFile");
        var list = new DataTransfer();
        list.items.add(files);
        thumbnailFile.files = list.files;
      }
      //Preview thumbnail
      function previewThumbnail(files) {
        var previousFiles = document.getElementById("completeGallery").children.length - 1; //minus 1 because thumbnail gallery is counted as one children in the complete gallery
        var thumbnailGallery = document.getElementById("thumbnail-gallery");
        var completeGallery = document.getElementById('completeGallery');
        let reader = new FileReader();
        reader.readAsDataURL(files[0]);
        reader.onloadend = function() {
          //img div to contain img and btn
          var imgDiv = document.createElement('div');
          imgDiv.classList.add('listingImage'); 
          imgDiv.setAttribute("id", "galleryItem"+previousFiles);
          //image src + file
          var img = document.createElement('img');
          img.src = reader.result;
          img.setAttribute("id", "imageItem"+previousFiles);
          img.classList.add("image-gallery-style");
          img.setAttribute("draggable", true);
          img.setAttribute("ondragstart", "drag(event)");
          //delete image btn
          var dltItemBtn = document.createElement('span');
          dltItemBtn.classList.add('deleteItemFromGallery');
          dltItemBtn.innerHTML= "&times;";
          dltItemBtn.setAttribute("onclick", "deleteItem("+previousFiles+")");
          //add img and btn to div
          imgDiv.appendChild(img);
          imgDiv.appendChild(dltItemBtn);
          //Append the thing to the complete gallery
          thumbnailGallery.removeChild(thumbnailGallery.children[0]);
          thumbnailGallery.appendChild(imgDiv);
        }
      }
      //HANDLING SELECT FILE FROM IMAGE GALLERY
      function handleSelectFile(slctEle) {
        console.log('check 2nd drop: ', slctEle);
        var selectedImage = document.getElementById(slctEle);
        console.log('selectedImage: ', selectedImage);
        updateSelect(slctEle);
        previewSelect(slctEle);
      }
      //Deleting from gallery files
      function removeItem(id) {
        //remove from file input
        var fileList = document.getElementById('galleryFileArray');
        var list = new DataTransfer();
        for(let i=0; i<fileList.files.length; i++) {
          if(i != id) {
            list.items.add(fileList.files[i]);
          }
        }
        fileList.files = list.files;
      }      
      //Update thumbnail
      function updateSelect(slctEle) {
        var selectedThumbnail = dataURLtoFile(document.getElementById(slctEle).src, "Thumbnail");
        var thumbnailFile = document.getElementById("thumbnailFile");
        var thumbnailGallery = document.getElementById("thumbnail-gallery");
        var galleryFileArray = document.getElementById("galleryFileArray");
        var slctedThumb = document.getElementById(slctEle).id.replace("imageItem", "")
        //get previous thumbnail file and set to gallery file
        if(thumbnailGallery.children[0].tagName == "I") {
        }else {
          var galleryList = new DataTransfer();
          for(let i=0; i<galleryFileArray.files.length; i++) {
            console.log('slctedThumb: ', slctedThumb)
            if(i != (slctedThumb-1)) {
              galleryList.items.add(galleryFileArray.files[i]);
              console.log('-1: ', galleryFileArray.files[i])
            }
          }
          for(let i=0; i<thumbnailFile.files.length; i++) {
            galleryList.items.add(thumbnailFile.files[i])
            console.log('a: ', thumbnailFile.files[i])
          }
          console.log('check updateslect: ', galleryList.files)
          galleryFileArray.files = galleryList.files;
          console.log(" galleryFileArray.files: ",  galleryFileArray.files)
        }
        //set gallery image into thumbnail file
        var list = new DataTransfer();
        list.items.add(selectedThumbnail);
        thumbnailFile.files = list.files;
      }
      //Preview thumbnail
      function previewSelect(slctEle) {
        var selectedElement = document.getElementById(slctEle);
        console.log('previewSelect: ', selectedElement.parentNode);
        var thumbnailGallery = document.getElementById("thumbnail-gallery");
        var completeGallery = document.getElementById('completeGallery');
        var thumbnailFile = document.getElementById('thumbnailFile');
        if(thumbnailGallery.children[0].tagName == "I") {
          thumbnailGallery.removeChild(thumbnailGallery.children[0]);
        }else {
          //col-2
          var imgColDiv = document.createElement('div');
          imgColDiv.classList.add('col-2');
          thumbnailGallery.children[0].children[1].style.display="block";
          imgColDiv.appendChild(thumbnailGallery.children[0]);
          //Append the thing to the complete gallery
          document.getElementById('completeGallery').appendChild(imgColDiv);
        }
        completeGallery.removeChild(selectedElement.parentNode.parentNode);
        selectedElement.parentNode.children[1].style.display = "none";
        thumbnailGallery.appendChild(selectedElement.parentNode);
        // removeItem(slctEle.replace("imageItem", ""));
      }
    </script> -->
  <!-- <script>
    let dropArea = document.getElementById("drop-area");

    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, preventDefaults, false)   
      document.body.addEventListener(eventName, preventDefaults, false)
    });

    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
      dropArea.addEventListener(eventName, highlight, false)
    });
    ['dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, unhighlight, false)
    });

    // Handle dropped files
    dropArea.addEventListener('drop', handleDrop, false);

    function preventDefaults (e) {
      e.preventDefault()
      e.stopPropagation()
    }

    function highlight(e) {
      dropArea.classList.add('highlight')
    }

    function unhighlight(e) {
      dropArea.classList.remove('highlight')
    }

    function handleDrop(e) {
      var dt = e.dataTransfer
      var files = dt.files
      console.log('hdisfas: ', files);
      handleGalleryFiles(files);
    }

    function handleGalleryFiles(files) {
        files = [...files];
        console.log('aaaaaaaa: ', files);
        updateGallery(files);
        previewGallery(files);
        var currentGallery = document.getElementById("galleryFileArray");
        if(currentGallery.files.length != 0) {
          document.getElementById("drop-area").style.display = "block"
          document.getElementById("add-drop-area").style.display = "block"
          document.getElementById("thumbnail-drop-area").style.display = "block"
          document.getElementById("upldForm-form").style.display = "block"
        }else if (currentGallery.files.length == 0) {
          document.getElementById("drop-area").style.display = "block"
          document.getElementById("add-drop-area").style.display = "none"
          document.getElementById("thumbnail-drop-area").style.display = "none"
          document.getElementById("upldForm-form").style.display = "none"
        }
        updateMediaCount();
    }

    function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.id);
    }

    function deleteItem(id) {
      //remove from preview
      document.getElementById("completeGallery").removeChild(document.getElementById("galleryItem"+id).parentNode);
      //remove from file input
      var fileList = document.getElementById('galleryFileArray');
      var list = new DataTransfer();
      for(let i=0; i<fileList.files.length; i++) {
        if(i != id) {
          console.log('adding new')
          console.log('new fle: ',fileList.files[i])
          list.items.add(fileList.files[i]);
        }
      }
      fileList.files = list.files;
      updateMediaCount();
    }

    function previewGallery(files) {
        var previousFiles = document.getElementById("completeGallery").children.length;
        var currentThumbnail = document.getElementById("thumbnailFile");
        for(let i=0; i<files.length; i++) {
            let reader = new FileReader();
            reader.readAsDataURL(files[i]);
            reader.onloadend = function() {
              if(files[i].type.includes('image')) {
                if(currentThumbnail.files.length == 0){
                  previousFiles--;
                }
                console.log('countjdsfaL : ',(i+previousFiles))
                //col-2
                var imgColDiv = document.createElement('div');
                imgColDiv.classList.add('col-2');
                //img div to contain img and btn
                  var imgDiv = document.createElement('div');
                  imgDiv.classList.add('listingImage'); 
                  imgDiv.setAttribute("id", "galleryItem"+(i+previousFiles));
                  //image src + file
                  var img = document.createElement('img');
                  img.src = reader.result;
                  img.setAttribute("id", "imageItem"+(i+previousFiles));
                  img.classList.add("image-gallery-style");
                  img.setAttribute("draggable", true);
                  img.setAttribute("ondragstart", "drag(event)");
                  //delete image btn
                  var dltItemBtn = document.createElement('span');
                  dltItemBtn.classList.add('deleteItemFromGallery');
                  dltItemBtn.innerHTML= "&times;";
                  dltItemBtn.setAttribute("onclick", "deleteItem("+(i+previousFiles)+")");
                  //add img and btn to div
                  imgDiv.appendChild(img);
                  imgDiv.appendChild(dltItemBtn);
                  imgColDiv.appendChild(imgDiv)
                  if(currentThumbnail.files.length == 0){
                    imgDiv.childNodes[1].style.display = "none"
                    console.log('1234: ', document.getElementById('thumbnail-gallery'))
                    document.getElementById('thumbnail-gallery').removeChild(document.getElementById('thumbnail-gallery').children[0])
                    document.getElementById('thumbnail-gallery').appendChild(imgDiv);
                    updateGallery(files.shift());
                  }else {
                    document.getElementById('completeGallery').appendChild(imgColDiv);
                  }
              }else if(files[i].type.includes('video')) {
                console.log('files at i', files[i])
                console.log('iiiiiii: ',i);
                //col-2
                var vidColDiv = document.createElement('div');
                vidColDiv.classList.add('col-2');

                //video div to contain video and button
                  var vidDiv = document.createElement('div');
                  vidDiv.classList.add('listingVideo'); 
                  vidDiv.setAttribute("id", "galleryItem"+(i+previousFiles));
                  //video src + file
                  var vid = document.createElement('video');
                  vid.src  = reader.result;
                  vid.setAttribute("controls", "")
                  vid.setAttribute("controlslist", "nodownload");
                  vid.setAttribute("id", "videoItem"+(i+previousFiles));
                  vid.classList.add("video-gallery-style");
                  //delete video btn
                  var dltItemBtn = document.createElement('span');
                  dltItemBtn.classList.add('deleteItemFromGallery');
                  dltItemBtn.innerHTML= "&times;";
                  dltItemBtn.setAttribute("onclick", "deleteItem("+(i+previousFiles)+")");
                  //add img and btn to div
                  vidDiv.appendChild(vid);
                  vidDiv.appendChild(dltItemBtn);
                  vidColDiv.appendChild(vidDiv)
                  document.getElementById('completeGallery').appendChild(vidColDiv);
              }
            }
        }   
    }

    function updateGallery(files) {
        var galleryFiles = document.getElementById("galleryFileArray");
        console.log('insidei: ',galleryFiles.files.length);
        var list = new DataTransfer();
        var additionalFiles = document.getElementById("additionalGallery");
        for(let i=0; i<additionalFiles.files.length; i++) {
          list.items.add(additionalFiles.files[i]);
        }
        if(files.length == 0) {
          for(let i=0; i<galleryFiles.files.length; i++) {
            list.items.add(galleryFiles.files[i]);
          }
        }
        for(let i=0; i<files.length; i++) {
          list.items.add(files[i]);
        }
        console.log('galsadjhkadfs: ', list.files);
        galleryFiles.files = list.files;
    }
  </script> -->
  <!-- additional drag and drop image/video -->
  <!-- <script>
        let addDropArea = document.getElementById("add-drop-area");

    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      addDropArea.addEventListener(eventName, preventDefaults, false)   
      document.body.addEventListener(eventName, preventDefaults, false)
    });

    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
      addDropArea.addEventListener(eventName, highlight, false)
    });
    ['dragleave', 'drop'].forEach(eventName => {
      addDropArea.addEventListener(eventName, unhighlight, false)
    });

    // Handle dropped files
    addDropArea.addEventListener('drop', handleAddDrop, false);

    function preventDefaults (e) {
      e.preventDefault()
      e.stopPropagation()
    }

    function highlight(e) {
      addDropArea.classList.add('highlight')
    }

    function unhighlight(e) {
      addDropArea.classList.remove('highlight')
    }

    function handleAddDrop(e) {
      var dt = e.dataTransfer
      var files = dt.files
      console.log('hdisfas: ', files);
      additionalUpdateGallery(files);
    }

    function handleAddGallery() {
      var galleryFiles = document.getElementById("galleryFileArray");
      console.log('sdasdasdsadsadsad: ',galleryFiles.files)
      return galleryFiles.files
    }

    function additionalUpdateGallery(files) {
      var galleryFiles = handleAddGallery();
      console.log('hhhhh: ',galleryFiles)
      files = [...files]//convert files to array
      var list = new DataTransfer();
      console.log('tttttttt: ', galleryFiles.length)
      for(let i=0; i<galleryFiles.length; i++) {
        list.items.add(galleryFiles[i]);
      }
      console.log('ppppppp: ', files.length)
      for(let i=0; i<files.length; i++) {
        list.items.add(files[i]);
      }
      var fileList = document.getElementById('galleryFileArray');
      fileList.files = list.files;
      previewGallery(files);
      updateMediaCount();
      // console.log('previous thumbnail in gallery: ',previousThumbnail)
      // if(previousThumbnail.childNodes[1].classList.value == 'listingImage') {
      //   console.log('checks out: ', previousThumbnail.childNodes[0].id);
      //   document.getElementById("thumbnailFile").value="";
      //   document.getElementById("thumbnail-gallery").removeChild(document.getElementById("thumbnail-gallery").firstChild);
      // }else {

      // }
    }
  </script> -->
  <!-- Choose Thumbnail drag and drop -->
  <!-- <script>
    let thumbnailDropArea = document.getElementById("thumbnail-drop-area");
    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        thumbnailDropArea.addEventListener(eventName, preventDefaults, false)   
        document.body.addEventListener(eventName, preventDefaults, false)
    });
    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
        thumbnailDropArea.addEventListener(eventName, highlight, false)
    });
    ['dragleave', 'drop'].forEach(eventName => {
        thumbnailDropArea.addEventListener(eventName, unhighlight, false)
    });
    // Handle dropped file
    thumbnailDropArea.addEventListener('drop', handleThumbDrop, false);
    function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
    }
    function highlight(e) {
        thumbnailDropArea.classList.add('highlight')
    }
    function unhighlight(e) {
        thumbnailDropArea.classList.remove('highlight')
    }
    function dataURLtoFile(dataurl, filename) {
      var arr = dataurl.split(','),
          mime = arr[0].match(/:(.*?);/)[1],
          bstr = atob(arr[1]), 
          n = bstr.length, 
          u8arr = new Uint8Array(n);
      while(n--){
          u8arr[n] = bstr.charCodeAt(n);
      }
      return new File([u8arr], filename, {type:mime});
    }
    function handleThumbDrop(e) {
      var thumbnailGallery = document.getElementById("thumbnail-gallery")
      var completeGallery = document.getElementById("completeGallery");
      var dt = e.dataTransfer;
      var files;
      console.log('dtgetdata: ', dt.getData('text'))
      var slctEle = document.getElementById(dt.getData("text"));
      console.log('slcele: ', slctEle)
      if(slctEle) {
        if(slctEle.classList.value == "image-gallery-style") {
          //set files
          files = dataURLtoFile(slctEle.src, "thumbnailImage");
          console.log('typ of fiel: ',files);
          updateThumbnail(files)
          console.log('peva: ', thumbnailGallery.children[0].classList.value);
        }
      
        //PREVIEW GALLERY
        if(thumbnailGallery.children[0].classList.value=="phlistingImage" || thumbnailGallery.children[0].classList.value=="thumbnail-gallery-style") {
          console.log('a')
          thumbnailGallery.removeChild(thumbnailGallery.children[0])
          slctEle.parentNode.children[1].style.display = "none"
          completeGallery.removeChild(slctEle.parentNode.parentNode)
          thumbnailGallery.appendChild(slctEle.parentNode)
        }else if(thumbnailGallery.children[0].classList.value=="prevlistingImage") {
          console.log('b')
          //thumbnail
          slctEle.parentNode.children[1].style.display = "none"
          completeGallery.removeChild(slctEle.parentNode.parentNode)
          thumbnailGallery.appendChild(slctEle.parentNode)
          //make col-2 and append back to gallery
          console.log('sadf: ', thumbnailGallery.children[0].children[1])
          thumbnailGallery.children[0].children[1].style.display = "block";
          var coltwo = document.createElement('div');
          coltwo.classList.add('col-2');
          coltwo.appendChild(thumbnailGallery.children[0])
          document.getElementById("completeGallery").appendChild(coltwo);
        }else if(thumbnailGallery.children[0].classList.value=="listingImage") {
          console.log('c')
          //thumbnail
          slctEle.parentNode.children[1].style.display = "none"
          console.log('asdfghjkl: ', slctEle.parentNode.parentNode)
          completeGallery.removeChild(slctEle.parentNode.parentNode)
          thumbnailGallery.appendChild(slctEle.parentNode)
          //make col-2 and append back to gallery
          thumbnailGallery.children[0].children[1].style.display = "block";
          var coltwo = document.createElement('div');
          coltwo.classList.add('col-2');
          coltwo.appendChild(thumbnailGallery.children[0])
          document.getElementById("completeGallery").appendChild(coltwo);
        }
      }else {
        console.log('qwertyui')
        files=dt.files;
        updateThumbnail(files);
        //PREVIEW GALLERY
        if(thumbnailGallery.children[0].classList.value=="phlistingImage") {
          console.log('a1')
          thumbnailGallery.removeChild(thumbnailGallery.children[0])
        }else if(thumbnailGallery.children[0].classList.value=="prevlistingImage") {
          console.log('b1')
          //make col-2 and append back to gallery
          console.log('sadf: ', thumbnailGallery.children[0].children[1])
          thumbnailGallery.children[0].children[1].style.display = "block";
          var coltwo = document.createElement('div');
          coltwo.classList.add('col-2');
          coltwo.appendChild(thumbnailGallery.children[0])
          document.getElementById("completeGallery").appendChild(coltwo);
        }else if(thumbnailGallery.children[0].classList.value=="listingImage") {
          console.log('c1')
          //make col-2 and append back to gallery
          thumbnailGallery.children[0].children[1].style.display = "block";
          var coltwo = document.createElement('div');
          coltwo.classList.add('col-2');
          coltwo.appendChild(thumbnailGallery.children[0])
          document.getElementById("completeGallery").appendChild(coltwo);
        }
        previewThumbnail(files)
      }
      updateMediaCount();
    }
    function handleThumbnailFile(files) {
      var imageGallery = document.getElementById("completeGallery");
        files = [...files];
        console.log('inside thumb: ',files)
        var previousThumbnail = document.getElementById("thumbnailFile");
        console.log('previousds length: ', previousThumbnail.files.length)
        if(previousThumbnail.files.length > 0) {
          previousThumbnail.value ="";
          imageGallery.appendChild(document.getElementById("thumbnail-gallery").children[0]);
        }
        updateThumbnail(files)
        previewThumbnail(files);
        updateMediaCount();
    }
    function previewThumbnail(files) {
      var thumbnailGallery = document.getElementById("thumbnail-gallery")
      var imageGallery = document.getElementById("completeGallery")
      console.log('thumbnaisda: ',files)
      var file;
      if(typeof files.length == 'undefined'){
        var list = new DataTransfer();
        list.items.add(files);
        file = list.files[list.files.length - 1];
        console.log('drag file: ', file);
        if(thumbnailGallery.children[0]) {
          imageGallery.appendChild(thumbnailGallery.children[0]);
        }
      }else {
        file = files[files.length - 1];
        console.log('select file', file);
        let reader = new FileReader();
        console.log('reader file: ', file);
        reader.readAsDataURL(file); 
        reader.onloadend = function() {
          console.log('given thumbnail file: ',file);
          var img = document.createElement('img');
          img.src = reader.result;
          img.classList.add("thumbnail-gallery-style");
          if(thumbnailGallery.children[0]) {
            thumbnailGallery.removeChild(thumbnailGallery.children[0]);
          }
          thumbnailGallery.appendChild(img);
        }
      }
    }
    function updateThumbnail(files) {
      console.log('chosen thumnail: ', files)
      var file;
      if(typeof files.length == 'undefined'){
        file = files
      }else {
        file = files[files.length - 1];
      }
      var thumbnailFiles = document.getElementById("thumbnailFile");
      console.log('thumbnail files length: ',thumbnailFiles.files.length);
      var list = new DataTransfer();
      console.log('check for multiple thumbnail: ',file)
      list.items.add(file);
      thumbnailFiles.files = list.files;
    }
</script> -->
<!-- <script>
function deletePrevItem(i) {
  console.log('passed i: ', i.id)
  document.getElementById("completeGallery").removeChild(i.parentNode.parentNode);
  if(i.parentNode.classList.value == "prevlistingImage") {
    // ID
    var prevImageIdArr = document.getElementById('prevImageId').value.split(",");
    var newPrevImageIdArr = [];
    for(let a=0; a<prevImageIdArr.length; a++) {
      if(prevImageIdArr[a] != i.id) {
        newPrevImageIdArr.push(prevImageIdArr[a]);
      }
    }
    // Norm
    var prevImageArr = document.getElementById('prevImage').value.split(",");
    var newPrevImageArr = [];
    for(let a=0; a<prevImageArr.length; a++) {
      if(prevImageArr[a] != i.src) {
        newPrevImageArr.push(prevImageArr[a]);
      }
    }
    // Set
    document.getElementById('prevImageId').value = newPrevImageIdArr;
    document.getElementById('prevImage').value = newPrevImageArr;
    document.getElementById('dltPrevImageId').value += i.id;
    document.getElementById('dltPrevImage').value += i.src;

  }else if(i.parentNode.classList.value == "prevlistingVideo") {
    // ID
    var prevVideoIdArr = document.getElementById('prevVideoId').value.split(",");
    var newPrevVideoIdArr = [];
    for(let a=0; a<prevVideoIdArr.length; a++) {
      if(prevVideoIdArr[a] != i.id) {
        newPrevVideoIdArr.push(prevVideoIdArr[a]);
      }
    }
    // Norm
    var prevVideoArr = document.getElementById('prevVideo').value.split(",");
    var newPrevVideoArr = [];
    for(let a=0; a<prevVideoArr.length; a++) {
      if(prevVideoArr[a] != i.src) {
        newPrevVideoArr.push(prevVideoArr[a]);
      }
    }
    // Set
    document.getElementById('prevVideoId').value = newPrevVideoIdArr;
    document.getElementById('prevVideo').value = newPrevVideoArr;
    document.getElementById('dltPrevVideoId').value += i.id;
    document.getElementById('dltPrevVideo').value += i.src;
  }
  var oldFileLength = [];
  oldFileLength.push(document.getElementById("prevThumbnailId"));
  var arrLengthImage = document.getElementById("prevImageId").value.split(",")
  for(let i=0; i<arrLengthImage.length; i++) {
    oldFileLength.push(arrLengthImage[i]);
  }
  var arrLengthVideo = document.getElementById("prevVideoId").value.split(",")
  for(let i=0; i<arrLengthVideo.length; i++) {
    oldFileLength.push(arrLengthVideo[i]);
  }
  // document.getElementById('listGalleryCount').innerHTML = "(" + oldFileLength.length + ' Media Uploaded)'
  updateMediaCount();

}
</script> -->

<footer class="container-fluid mt-5 "id="footer" style="background-color: #292b2c; color: white">
</footer>
<script src="https://use.fontawesome.com/releases/v5.15.3/js/all.js" data-auto-replace-svg="nest"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"
integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="/javascripts/owl.carousel.min.js"></script>
<script src="/javascripts/jquer.js"></script>
<script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@fancyapps/ui/dist/fancybox.umd.js"></script>
<script>
$(window).on('load', function(){
  $(".loader").fadeOut(1000);
});
</script>
<script>
function sortTableByColumn(table, column, asc = true) {
    const dirModifier = asc ? 1 : -1;
    const tBody = table.tBodies[0];
    const rows = Array.from(tBody.querySelectorAll("tr"));

    // Sort each row
    const sortedRows = rows.sort((a, b) => {
        const aColText = a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();
        const bColText = b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();

        return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
    });

    // Remove all existing TRs from the table
    while (tBody.children[0]) {
        tBody.removeChild(tBody.children[0]);
    }

    // Re-add the newly sorted rows
    tBody.append(...sortedRows);

    // Remember how the column is currently sorted
    table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
    table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-asc", asc);
    table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-desc", !asc);
}

document.querySelectorAll(".table-sortable th").forEach(headerCell => {
    headerCell.addEventListener("click", () => {
        const tableElement = headerCell.parentElement.parentElement.parentElement;
        const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
        const currentIsAscending = headerCell.classList.contains("th-sort-asc");

        sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
    });
});
</script>
<script>
AOS.init();
</script>
</body>

</html>