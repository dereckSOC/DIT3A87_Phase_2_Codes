<%- include("../partials/header") %>

  <h1>Create a New listing</h1>
  <div class="container">
    <div class="d-flex justify-content-around">
      <!-- Form -->
        <form action="/listings" method="POST" enctype="multipart/form-data" name="newListingForm">
          <!-- slide: drag and drop upload listing files -->
            <div id="drop-area">
              <p style="margin-top: 0;">Drag and drop images/videos</p>
              <label class="fileBtn" for="galleryFileArray">Select files</label>
              <input type="file" name="listingGallery" id="galleryFileArray" multiple accept="image/*, video/*" onchange="handleGalleryFiles(this.files)" required>
            </div>
            <!-- additional image/video gallery drag and drop -->
            <div id="add-drop-area">
              <p style="margin-top: 0;">Additional Images?</p>
              <label class="fileBtn" for="additionalGallery">Select files</label>
              <input type="file" name="additionalGallery" id="additionalGallery" multiple accept="image/*, video/*" onchange="additionalUpdateGallery(this.files)">
            </div>
            <!-- thumbnail -->
            <div id="thumbnail-drop-area">
              <div id="thumbnail-gallery"></div>
              <p style="margin-top: 0;">Drag and drop thumbnail image</p>
              <label class="fileBtn" for="thumbnailFile">Select thumbnail image</label>
              <input name="listingThumbnail" type="file" id="thumbnailFile" accept="image/*" onchange="handleThumbnailFile(this.files)" required>
            </div>
            <!-- gallery preview -->
            <div id="image-gallery"></div>
            <div id="video-gallery"></div>
            <!-- form -->
            <div id="upldForm-form">
              <input type="text" name="name" placeholder="name">
              <!-- <input type="text" name="image" placeholder="image url"> -->
              <input type="text" name="description" placeholder="Description">
              <!-- district -->
              <!-- <input type="text" name="zone" placeholder="District"> -->
              <label for="district">District:</label>
              <select name="district" id="district">
                <option value="north" selected>North</option>
                <option value="south">South</option>
                <option value="east">East</option>
                <option value="west">West</option>
              </select>
              <!-- location -->
              <input type="text" name="location" placeholder="Location">
              <input type="number" name="price" placeholder="Price">
              <input type="number" name="size" placeholder="Size">
              <!-- property type -->
              <!-- <input type="text" name="type" placeholder="Property Type"> -->
              <label for="type">Property Type:</label>
              <select name="type" id="type">
                <option value="hdb" selected>HDB</option>
                <option value="condo">Condo</option>
                <option value="landed">Landed</option>
              </select>
              <!-- bedrooms -->
              <!-- <input type="number" name="bedrooms" placeholder="Number of bed rooms"> -->
              <label for="bedrooms">Bedrooms:</label>
              <select name="bedrooms" id="bedrooms">
                <option value="1" selected>1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
              </select>
              <!-- bathrooms -->
              <!-- <input type="number" name="bathrooms" placeholder="Number of bath rooms"> -->
              <label for="bathrooms">Bathrooms:</label>
              <select name="bathrooms" id="bathrooms">
                <option value="1" selected>1</option>
                <option value="2">2</option>
                <option value="3">3</option>
              </select>
              <!-- tenure -->
              <label for="tenure">Tenure:</label>
              <select name="tenure" id="tenure">
                <option value="unknown" selected>Unknown</option>
                <option value="ninetynine">99-Year Leasehold</option>
                <option value="hundredthree">103-Year Leasehold</option>
                <option value="hundredten">110-Year Leasehold</option>
                <option value="ninehundrednine">999-Year Leasehold</option>
                <option value="freehold">Freehold</option>
              </select>
              <!-- 3d image link -->
              <input type="text" name="threeDImage" placeholder="3D image link">
            </div>
            <input type="submit" value="Submit">
        </form>
    </div> <!-- d-flex -->
  </div> <!-- container -->
  <a href="/listings">Go Back</a>

<!-- GALLERY FILES -->
<script>
    let dropArea = document.getElementById("drop-area");

    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, preventDefaults, false)   
      document.body.addEventListener(eventName, preventDefaults, false)
    });

    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
      dropArea.addEventListener(eventName, highlight, false)
    });
    ['dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, unhighlight, false)
    });

    // Handle dropped files
    dropArea.addEventListener('drop', handleDrop, false);

    function preventDefaults (e) {
      e.preventDefault()
      e.stopPropagation()
    }

    function highlight(e) {
      dropArea.classList.add('highlight')
    }

    function unhighlight(e) {
      dropArea.classList.remove('highlight')
    }

    function handleDrop(e) {
      var dt = e.dataTransfer
      var files = dt.files
      console.log('hdisfas: ', files);
      handleGalleryFiles(files);
    }

    function handleGalleryFiles(files) {
        files = [...files];//make files into array
        console.log('aaaaaaaa: ', files);
        updateGallery(files);
        previewGallery(files);
        var currentGallery = document.getElementById("galleryFileArray");
        if(currentGallery.files.length != 0) {
          // document.getElementById("drop-area").style.display = "none"
          // document.getElementById("add-drop-area").style.display = "block"
          // document.getElementById("thumbnail-drop-area").style.display = "block"
          // document.getElementById("upldForm-form").style.display = "block"
        }
    }

    function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.id);
    }

    function deleteItem(id) {
      //remove from preview
      document.getElementById("galleryItem"+id).style.display = "none";
      //remove from file input
      var fileList = document.getElementById('galleryFileArray');
      var list = new DataTransfer();
      for(let i=0; i<fileList.files.length; i++) {
        if(i != id) {
          console.log('adding new')
          console.log('new fle: ',fileList.files[i])
          list.items.add(fileList.files[i]);
        }
      }
      fileList.files = list.files;
    }

    function previewGallery(files) {
        console.log('given gallery files: ', files);
        var imageGallery = document.getElementById("image-gallery")
        while(imageGallery.firstChild) {
          imageGallery.removeChild(imageGallery.firstChild)
        }
        var videoGallery = document.getElementById("video-gallery")
        while(videoGallery.firstChild) {
          videoGallery.removeChild(videoGallery.firstChild)
        }
        // var firstImageThumbnail = 0;
        // var thumbnailPreview = document.getElementById("thumbnailFile")
        var currentThumbnail = document.getElementById("thumbnailFile");
        for(let i=0; i<files.length; i++) {
            let reader = new FileReader();
            reader.readAsDataURL(files[i]);
            reader.onloadend = function() {
              if(files[i].type.includes('image')) {
                // if (firstImageThumbnail == 0) {
                //   //dont show first image in lisitng gallery
                //   console.log('sdhsjakfhskfsdakf');
                //   updateThumbnail(files[i])
                //   previewThumbnail(files[i])
                //   firstImageThumbnail++;
                // }else {
                //img div to contain img and btn
                  var imgDiv = document.createElement('div');
                  imgDiv.classList.add('listingImage'); 
                  imgDiv.setAttribute("id", "galleryItem"+i);
                  //image src + file
                  var img = document.createElement('img');
                  img.src = reader.result;
                  img.setAttribute("id", "imageItem"+i);
                  img.classList.add("image-gallery-style");
                  img.setAttribute("draggable", true);
                  img.setAttribute("ondragstart", "drag(event)");
                  //delete image btn
                  var dltItemBtn = document.createElement('span');
                  dltItemBtn.classList.add('deleteItemFromGallery');
                  dltItemBtn.innerHTML= "&times;";
                  dltItemBtn.setAttribute("onclick", "deleteItem("+i+")");
                  //add img and btn to div
                  imgDiv.appendChild(img);
                  imgDiv.appendChild(dltItemBtn);
                  document.getElementById('image-gallery').appendChild(imgDiv);
                  if(currentThumbnail.files.length == 0){
                    updateThumbnail(files[i])
                    // imgDiv.childNodes[1].style.display = "none"
                    document.getElementById('thumbnail-gallery').appendChild(imgDiv);
                    // previewThumbnail(files[i])
                    // imgDiv.style.display = "none"
                  }
                // }
              }else if(files[i].type.includes('video')) {
                console.log('files at i', files[i])
                console.log('iiiiiii: ',i);
                //video div to contain video and button
                  var vidDiv = document.createElement('div');
                  vidDiv.classList.add('listingVideo'); 
                  vidDiv.setAttribute("id", "galleryItem"+i);
                  //video src + file
                  var vid = document.createElement('iframe');
                  vid.src  = reader.result;
                  vid.setAttribute("id", "videoItem"+i);
                  vid.classList.add("video-gallery-style");
                  //delete video btn
                  var dltItemBtn = document.createElement('span');
                  dltItemBtn.classList.add('deleteItemFromGallery');
                  dltItemBtn.innerHTML= "&times;";
                  dltItemBtn.setAttribute("onclick", "deleteItem("+i+")");
                  //add img and btn to div
                  vidDiv.appendChild(vid);
                  vidDiv.appendChild(dltItemBtn);
                  document.getElementById('video-gallery').appendChild(vidDiv);
              }
            }
            // var currentThumbnail = document.getElementById("thumbnailFile");
            // for(let i=0; i<files.length; i++) {
            //   if(currentThumbnail.files.length == 0 && files[i].type.includes('image')) {
            //     console.log('ioioioioio: ',i)
            //     updateThumbnail(files[i])
            //     previewThumbnail(files[i])
            //     document.getElementById("galleryItem"+i).style.display = "none";
            //   }
            // }
        }   
    }

    function updateGallery(files) {
        var galleryFiles = document.getElementById("galleryFileArray");
        console.log('insidei: ',galleryFiles.files.length);
        var list = new DataTransfer();
        var additionalFiles = document.getElementById("additionalGallery");
        for(let i=0; i<additionalFiles.files.length; i++) {
          list.items.add(additionalFiles.files[i]);
        }
        if(files.length == 0) {
        for(let i=0; i<galleryFiles.files.length; i++) {
          list.items.add(galleryFiles.files[i]);
        }
        }
        for(let i=0; i<files.length; i++) {
          list.items.add(files[i]);
        }
        console.log('galsadjhkadfs: ', list.files);
        galleryFiles.files = list.files;
        //if thumbnail file is empty, populate with first image in gallery
        var thumbnailFile = document.getElementById("thumbnailFile");
        console.log('the files in thumbnail file side: ', thumbnailFile.files.length);
        console.log('teypsadl: ', list.files[0].type)
        // if(thumbnailFile.files.length == 0 && list.files[0].type.includes("image")) {
        //   files = files[0];
        //   updateThumbnail(files);
        //   // previewThumbnail(files);
        // }
    }
  </script>
  <!-- additional drag and drop image/video -->
  <script>
        let addDropArea = document.getElementById("add-drop-area");

    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      addDropArea.addEventListener(eventName, preventDefaults, false)   
      document.body.addEventListener(eventName, preventDefaults, false)
    });

    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
      addDropArea.addEventListener(eventName, highlight, false)
    });
    ['dragleave', 'drop'].forEach(eventName => {
      addDropArea.addEventListener(eventName, unhighlight, false)
    });

    // Handle dropped files
    addDropArea.addEventListener('drop', handleAddDrop, false);

    function preventDefaults (e) {
      e.preventDefault()
      e.stopPropagation()
    }

    function highlight(e) {
      addDropArea.classList.add('highlight')
    }

    function unhighlight(e) {
      addDropArea.classList.remove('highlight')
    }

    function handleAddDrop(e) {
      var dt = e.dataTransfer
      var files = dt.files
      console.log('hdisfas: ', files);
      additionalUpdateGallery(files);
    }

    function handleAddGallery() {
      var galleryFiles = document.getElementById("galleryFileArray");
      console.log('sdasdasdsadsadsad: ',galleryFiles.files)
      return galleryFiles.files
    }

    function additionalUpdateGallery(files) {
      var galleryFiles = handleAddGallery();
      console.log('hhhhh: ',galleryFiles)
      files = [...files]//convert files to array
      var list = new DataTransfer();
      console.log('tttttttt: ', galleryFiles.length)
      for(let i=0; i<galleryFiles.length; i++) {
        list.items.add(galleryFiles[i]);
      }
      console.log('ppppppp: ', files.length)
      for(let i=0; i<files.length; i++) {
        list.items.add(files[i]);
      }
      var fileList = document.getElementById('galleryFileArray');
      fileList.files = list.files;
      previewGallery(list.files);
    }
  </script>
  <!-- Choose Thumbnail drag and drop -->
  <script>
    let thumbnailDropArea = document.getElementById("thumbnail-drop-area");
    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        thumbnailDropArea.addEventListener(eventName, preventDefaults, false)   
        document.body.addEventListener(eventName, preventDefaults, false)
    });
    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
        thumbnailDropArea.addEventListener(eventName, highlight, false)
    });
    ['dragleave', 'drop'].forEach(eventName => {
        thumbnailDropArea.addEventListener(eventName, unhighlight, false)
    });
    // Handle dropped file
    thumbnailDropArea.addEventListener('drop', handleThumbDrop, false);

    function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
    }

    function highlight(e) {
        thumbnailDropArea.classList.add('highlight')
    }

    function unhighlight(e) {
        thumbnailDropArea.classList.remove('highlight')
    }

    function dataURLtoFile(dataurl, filename) {
      var arr = dataurl.split(','),
          mime = arr[0].match(/:(.*?);/)[1],
          bstr = atob(arr[1]), 
          n = bstr.length, 
          u8arr = new Uint8Array(n);
      while(n--){
          u8arr[n] = bstr.charCodeAt(n);
      }
      return new File([u8arr], filename, {type:mime});
    }

    function handleThumbDrop(e) {
      var thumbnailGallery = document.getElementById("thumbnail-gallery")

        var dt = e.dataTransfer;
        console.log('dt provi: ',dt.getData("text"));//document.getElementById(dt.getData("text"))
        console.log('dfgsdf: ', dt)
        var files;
        console.log('dtgetdata: ', dt.getData('text'))
        var slctEle = document.getElementById(dt.getData("text"));
        if(slctEle != null) {
          files = dataURLtoFile(slctEle.src, "thumbnailImage");
          console.log('typ of fiel: ',files);
          thumbnailGallery.appendChild(document.getElementById(dt.getData("text")).parentElement);
          // document.getElementById(dt.getData("text")).parentElement.childNodes[1].style.display = "none"
        }else{
          files = dt.files;
          console.log('drop: ', files)
        }
        updateThumbnail(files)
        previewThumbnail(files);
    }

    function handleThumbnailFile(files) {
        files = [...files];//make files into array
        console.log('inside thumb: ',files)
        updateThumbnail(files)
        previewThumbnail(files);
    }

    function previewThumbnail(files) {
      var thumbnailGallery = document.getElementById("thumbnail-gallery")

      var imageGallery = document.getElementById("image-gallery")

      console.log('thumbnaisda: ',files)
      var file;
      if(typeof files.length == 'undefined'){
        var list = new DataTransfer();
        list.items.add(files);
        file = list.files[list.files.length - 1];
        console.log('drag file: ', file);
        if(thumbnailGallery.firstChild) {
          // thumbnailGallery.childNodes[1].style.display = "block"
          imageGallery.appendChild(thumbnailGallery.firstChild);
          // imageGallery.childNodes[1].style.display = "block"
        }
      }else {
        file = files[files.length - 1];
        console.log('select file', file);
        let reader = new FileReader();
        console.log('reader file: ', file);
        reader.readAsDataURL(file); 
        reader.onloadend = function() {
          console.log('given thumbnail file: ',file);
          var img = document.createElement('img');
          img.src = reader.result;
          img.classList.add("thumbnail-gallery-style");
          thumbnailGallery.appendChild(img);
        }
      }
    }

    function updateThumbnail(files) {
      console.log('chosen file: ',typeof files.length)
      console.log('chosen thumnail: ', files)
      var file;
      if(typeof files.length == 'undefined'){
        file = files
      }else {
        file = files[files.length - 1];
      }
      var thumbnailFiles = document.getElementById("thumbnailFile");
      console.log('thumbnail files length: ',thumbnailFiles.files.length);
      var list = new DataTransfer();
      console.log('check for multiple thumbnail: ',file)
      list.items.add(file);
      thumbnailFiles.files = list.files;
    }
</script>

  <%- include("../partials/footer") %>